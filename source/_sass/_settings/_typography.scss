@import
'../_tools/functions',
'../_tools/modular-scale';

// ----- Typography Variables ----- //

// Bourbon var to determine the modular scale
// in their function to return consistent, scaled values
$g-modular-scale--ratio: 1.2;

// Bourbon var to set the starting font size
// in the modular scale functions
$g-modular-scale--base: 1rem;

$g-system-font-stack: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
$g-header-font-stack: "Futura", "Helvetica Neue", "Helvetica", "Roboto", "Arial", Sans Serif;
$g-mono-font-stack: "Bitstream Vera Sans Mono", "Consolas", "Courier", Monospace;

$typography-map: (
  font-family: (
    base: $g-system-font-stack,
    header: $g-header-font-stack,
    mono: $g-mono-font-stack
  ),

  font-size: (
    h1: decimal-round(modular-scale(5), 2),
    h2: decimal-round(modular-scale(4), 2),
    h3: decimal-round(modular-scale(3), 2),
    h4: decimal-round(modular-scale(2), 2),
    h5: decimal-round(modular-scale(1), 2),
    h6: decimal-round(modular-scale(0), 2),
    large: decimal-round(modular-scale(0), 2),
    p: decimal-round(modular-scale(0), 2),
    small: decimal-round(modular-scale(-1), 2),
    tiny: decimal-round(modular-scale(-2), 2)
  ),

  font-weight: (
    bold: 700,
    base: 400,
    light: 100
  ),

  line-height: (
    h1: decimal-round(modular-scale(7), 2),
    h2: decimal-round(modular-scale(6), 2),
    h3: decimal-round(modular-scale(5), 2),
    h4: decimal-round(modular-scale(4), 2),
    h5: decimal-round(modular-scale(3), 2),
    h6: decimal-round(modular-scale(3), 2),
    p: decimal-round(modular-scale(2), 2),
    small: decimal-round(modular-scale(2), 2),
    tiny: decimal-round(modular-scale(2), 2)
  ),

  margin: (
    h1: plph-spacing() 0,
    h2: plph-spacing(half) 0,
    h3: plph-spacing(half) 0,
    h4: plph-spacing(half) 0,
    h5: plph-spacing(half) 0,
    h6: plph-spacing(half) 0,
    p: 0 0 plph-spacing(double) 0,
    small: plph-spacing(half) 0,
    tiny: plph-spacing(half) 0
  )
);

// For pulling any typography values
// No base is set so it always needs two values
@function plph-type($type-var, $val: 'base') {
  @if map-has-key($typography-map, $type-var) {
    @return map-get(map-get($typography-map, $type-var), $val);
  }
}
